{"version":3,"sources":["Navbar.js","Body.js","DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","useState","username","setUsername","pass","setPass","history","useHistory","login","e","preventDefault","users","JSON","parse","localStorage","getItem","user","uname","password","setItem","alert","push","window","location","reload","logout","className","onClick","type","placeholder","value","onChange","target","Body","name","setName","src","alt","width","action","data","stringify","DashBoard","App","path","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAgEeA,MA3Df,WAAmB,IAAD,EAEkBC,mBAAS,IAF3B,mBAEPC,EAFO,KAEGC,EAFH,OAGUF,mBAAS,IAHnB,mBAGPG,EAHO,KAGDC,EAHC,KAIRC,EAAUC,cAEhB,SAASC,EAAMC,GACXA,EAAEC,iBACF,IAFc,EAEVF,GAAQ,EACRG,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,SAH9B,cAIGJ,GAJH,IAId,2BAAwB,CAAC,IAAhBK,EAAe,QACpB,GAAIA,EAAKC,QAAUf,GAAYc,EAAKE,WAAad,EAAM,CACnDI,GAAQ,EACGM,aAAaC,QAAQ,aACzB,EACPD,aAAaK,QAAQ,YADd,KARD,8BAYVX,GACAY,MAAM,wBACNd,EAAQe,KAAK,cACbC,OAAOC,SAASC,QAAO,KAGvBJ,MAAM,wCACNd,EAAQe,KAAK,MAIrB,SAASI,IACMX,aAAaC,QAAQ,YAEhCD,aAAaK,QAAQ,YADd,GAEPC,MAAM,qCACNd,EAAQe,KAAK,KACbC,OAAOC,SAASC,QAAO,GAG3B,OAAO,yBAAKE,UAAU,WAClB,yBAAKA,UAAU,YAAW,yCAC1B,yBAAKA,UAAU,YAGCd,KAAKC,MAAMC,aAAaC,QAAQ,aACzB,4BAAQW,UAAU,kBAAkBC,QAASF,GAA7C,UAGA,6BACH,2BAAOG,KAAK,OAAOC,YAAY,iBAAiBC,MAAO5B,EAAU6B,SAAU,SAACtB,GAAQN,EAAYM,EAAEuB,OAAOF,UACzG,2BAAOF,KAAK,WAAWC,YAAY,iBAAiBC,MAAO1B,EAAM2B,SAAU,SAACtB,GAAQJ,EAAQI,EAAEuB,OAAOF,UACrG,4BAAQJ,UAAU,kBAAkBC,QAASnB,GAA7C,aCdbyB,MApCf,WAAgB,IAAD,EAEahC,mBAAS,IAFtB,mBAEJiC,EAFI,KAEEC,EAFF,OAGqBlC,mBAAS,IAH9B,mBAGJC,EAHI,KAGMC,EAHN,OAIaF,mBAAS,IAJtB,mBAIJG,EAJI,KAIEC,EAJF,KAmBX,OAAO,yBAAKqB,UAAU,WAClB,yBAAKA,UAAU,aACX,yBAAKU,IAAI,wGAAwGC,IAAI,WAAWC,MAAM,UAE1I,yBAAKZ,UAAU,aACf,yBAAKA,UAAU,gBACX,iDACA,0BAAMA,UAAU,OAAOa,OAAO,IAC1B,2BAAOX,KAAK,OAAOF,UAAU,eAAeG,YAAY,OAAOC,MAAOI,EAAMH,SAAU,SAACtB,GAAK0B,EAAQ1B,EAAEuB,OAAOF,UAC7G,2BAAOF,KAAK,OAAOF,UAAU,eAAeG,YAAY,WAAWC,MAAO5B,EAAU6B,SAAU,SAACtB,GAAKN,EAAYM,EAAEuB,OAAOF,UACzH,2BAAOF,KAAK,WAAWF,UAAU,eAAeG,YAAY,WAAWC,MAAO1B,EAAM2B,SAAU,SAACtB,GAAKJ,EAAQI,EAAEuB,OAAOF,UACrH,4BAAQJ,UAAU,2BAA2BC,QAxBzD,SAAkBlB,GACdA,EAAEC,iBACF,IAAIC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,MACnDyB,EAAO,CACP,KAAON,EACP,MAAQhC,EACR,SAAWE,GAEfO,EAAMU,KAAKmB,GACX1B,aAAaK,QAAQ,OAAOP,KAAK6B,UAAU9B,IAC3CS,MAAM,6CAcE,qBC7BDsB,MAJf,WACI,OAAO,0CCmBIC,MAdf,WAGE,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,UAAWZ,EAAMa,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWH,EAAWI,OAAK,OCJtCC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad5d5c11.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Navbar.css'\r\n\r\nfunction Navbar() {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const history = useHistory();\r\n\r\n    function login(e) {\r\n        e.preventDefault();\r\n        var login = false;\r\n        var users = JSON.parse(localStorage.getItem('user'));\r\n        for (let user of users) {\r\n            if (user.uname === username && user.password === pass) {\r\n                login = true\r\n                var data = localStorage.getItem('loggedin');\r\n                data = true;\r\n                localStorage.setItem('loggedin', data);\r\n            }\r\n        }\r\n        if (login) {\r\n            alert('Login Successfully!!')\r\n            history.push('/dashboard');\r\n            window.location.reload(true);\r\n        }\r\n        else {\r\n            alert('ERROR!! Check your Credentials again');\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    function logout(){\r\n        var data = localStorage.getItem('loggedin');\r\n        data = false;\r\n        localStorage.setItem('loggedin',data);\r\n        alert('You are Successfully Logged Out!!')\r\n        history.push('/');\r\n        window.location.reload(true);\r\n    }\r\n\r\n    return <div className='row nav'>\r\n        <div className=\"col-md-6\"><h3>Facebook</h3></div>\r\n        <div className=\"col-md-6\">\r\n            {\r\n                (() => {\r\n                    if (JSON.parse(localStorage.getItem('loggedin'))) {\r\n                        return <button className=\"btn btn-primary\" onClick={logout}>Logout</button>\r\n                    }\r\n                    else {\r\n                        return <div>\r\n                            <input type=\"text\" placeholder=\"Enter username\" value={username} onChange={(e) => { setUsername(e.target.value) }} />\r\n                            <input type=\"password\" placeholder=\"Enter password\" value={pass} onChange={(e) => { setPass(e.target.value) }} />\r\n                            <button className=\"btn btn-primary\" onClick={login}>Login</button>\r\n                        </div>\r\n                    }\r\n                })()\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './Navbar.css'\r\nimport { useState } from 'react';\r\n\r\nfunction Body(){\r\n\r\n    const [name, setName] = useState(''); \r\n    const [username, setUsername] = useState('');\r\n    const [pass, setPass] = useState('');\r\n\r\n    function register(e){\r\n        e.preventDefault();\r\n        var users = JSON.parse(localStorage.getItem('user') || \"[]\")\r\n        var data = {\r\n            'name':name,\r\n            'uname':username,\r\n            'password':pass\r\n        }   \r\n        users.push(data);\r\n        localStorage.setItem('user',JSON.stringify(users))\r\n        alert('Congratulations!! You are registered...')\r\n    }\r\n\r\n    return <div className='row p-3'>\r\n        <div className=\"col-md-6 \">\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTzByHFeQFQhVR2-rtfimR0DkR52f2lMz8y-w&usqp=CAU\" alt=\"facebook\" width=\"100%\"/>\r\n        </div>\r\n        <div className=\"col-md-1\"></div>\r\n        <div className=\"col-md-4 p-2\">\r\n            <h1>Register Yourself</h1>\r\n            <form className=\"form\" action=\"\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Name\" value={name} onChange={(e)=>{setName(e.target.value)}} />\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Username\" value={username} onChange={(e)=>{setUsername(e.target.value)}} />\r\n                <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={pass} onChange={(e)=>{setPass(e.target.value)}} />\r\n                <button className=\"btn btn-primary register\" onClick={register}>Register User</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Body","import React from 'react';\r\n\r\nfunction DashBoard(){\r\n    return <h1>DashBoard</h1>\r\n}\r\n\r\nexport default DashBoard;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\n// import { useState } from 'react';\nimport NavBar from './Navbar';\nimport Body from './Body';\nimport DashBoard from './DashBoard';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <NavBar/>\n      <Route path=\"/\" component={Body} exact/>\n      <Route path=\"/dashboard\" component={DashBoard} exact/>\n      </BrowserRouter>\n    </div> \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}